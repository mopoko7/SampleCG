//===---- SampleCGISelDAGToDAG.h - A Dag to Dag Inst Selector for SampleCG --------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the SAMPLECG target.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_SAMPLECG_SAMPLECGISELDAGTODAG_H
#define LLVM_LIB_TARGET_SAMPLECG_SAMPLECGISELDAGTODAG_H

#include "SampleCG.h"
#include "SampleCGSubtarget.h"
#include "SampleCGTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// SampleCGDAGToDAGISel - SAMPLECG specific code to select SAMPLECG machine
// instructions for SelectionDAG operations.
//===----------------------------------------------------------------------===//
namespace llvm {

class SampleCGDAGToDAGISel : public SelectionDAGISel {
public:
  explicit SampleCGDAGToDAGISel(SampleCGTargetMachine &TM, CodeGenOpt::Level OL)
      : SelectionDAGISel(TM, OL), Subtarget(nullptr) {}

  // Pass Name
  StringRef getPassName() const override {
    return "SAMPLECG DAG->DAG Pattern Instruction Selection";
  }

  bool runOnMachineFunction(MachineFunction &MF) override;

  void getAnalysisUsage(AnalysisUsage &AU) const override;

  SDNode *getGlobalBaseReg();

protected:
  /// Keep a pointer to the SampleCGSubtarget around so that we can make the right
  /// decision when generating code for different targets.
  const SampleCGSubtarget *Subtarget;

private:
  // Include the pieces autogenerated from the target description.
  #include "SampleCGGenDAGISel.inc"

  void Select(SDNode *N) override;

  virtual bool trySelect(SDNode *Node) = 0;

  bool SelectAddr(SDNode *Parent, SDValue N, SDValue &Base, SDValue &Offset);

  // getImm - Return a target constant with the specified value.
  inline SDValue getImm(const SDNode *Node, uint64_t Imm) {
    return CurDAG->getTargetConstant(Imm, SDLoc(Node), Node->getValueType(0));
  }

  virtual void processFunctionAfterISel(MachineFunction &MF) = 0;

  bool SelectInlineAsmMemoryOperand(const SDValue &Op,
                                    unsigned ConstraintID,
                                    std::vector<SDValue> &OutOps) override;
};
}

#endif
