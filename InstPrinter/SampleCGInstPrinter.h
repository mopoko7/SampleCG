//=== SampleCGInstPrinter.h - Convert SampleCG MCInst to assembly syntax -*- C++ -*-==//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This class prints a SampleCG MCInst to a .s file.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_SAMPLECG_INSTPRINTER_SAMPLECGINSTPRINTER_H
#define LLVM_LIB_TARGET_SAMPLECG_INSTPRINTER_SAMPLECGINSTPRINTER_H
#include "llvm/ADT/StringRef.h"
#include "llvm/MC/MCInstPrinter.h"

namespace llvm {
// These enumeration declarations were originally in SampleCGInstrInfo.h but
// had to be moved here to avoid circular dependencies between
// LLVMSampleCGCodeGen and LLVMSampleCGAsmPrinter.

class SampleCGInstPrinter : public MCInstPrinter {
public:
  SampleCGInstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,
                  const MCRegisterInfo &MRI)
    : MCInstPrinter(MAI, MII, MRI) {}

  ~SampleCGInstPrinter() override {}

  // Autogenerated by tblgen.
  void printInstruction(const MCInst *MI, raw_ostream &O);
  static const char *getRegisterName(unsigned RegNo);

  void printRegName(raw_ostream &OS, unsigned RegNo) const override;
  void printInst(const MCInst *MI, raw_ostream &O, StringRef Annot,
                 const MCSubtargetInfo &STI) override;
  bool applyTargetSpecificCLOption(StringRef Opt) override { return false; }


  bool printAliasInstr(const MCInst *MI, raw_ostream &OS);
  void printCustomAliasOperand(const MCInst *MI, unsigned OpIdx,
                               unsigned PrintMethodIdx, raw_ostream &O);
  void printMemOperandEA(const MCInst*MI, int opNum, raw_ostream &O);

private:
  void printOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O);
  template <unsigned Bits, unsigned Offset = 0>
  void printUImm(const MCInst *MI, int opNum, raw_ostream &O);
  void printMemOperand(const MCInst *MI, int opNum, raw_ostream &O);
  void printSHFMask(const MCInst *MI, int opNum, raw_ostream &O);

  void printSaveRestore(const MCInst *MI, raw_ostream &O);
  void printRegisterList(const MCInst *MI, int opNum, raw_ostream &O);
};
} // end namespace llvm

#endif
